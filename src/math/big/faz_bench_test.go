package big

import (
	"fmt"
	"testing"
)


func BenchmarkFazMontgomery(b *testing.B) {
	
	mulx := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433")
	muly := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835435")
	mod  := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835431")

	var z nat
	n := len(mulx)
	z = z.make(2 * n)

	var k Word
	k = (1 << 64) - 1

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		z.montgomery(mulx, muly, mod, k, n)
	}
}

func BenchmarkFazMul(b *testing.B) {
	
	mulx := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433")
	muly := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835431")
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		var z nat
		z.mul(mulx, muly)
	}
}

func BenchmarkFazbasicMul(b *testing.B) {
	
	mulx := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433")
	muly := natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835431")

	var z nat
	n := len(mulx)
	z = z.make(2 * n)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		basicMul(z, mulx, muly)
	}
}

func BenchmarkFazSqr(b *testing.B) {
	var mulx nat
	mulx = natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433")

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		var z nat
		z.sqr(mulx)
	}
}

func BenchmarkFazbasicSqr(b *testing.B) {
	var mulx nat
	mulx = natFromString("812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433812057848953725743532498894375134890158458463578463856324783543381205784895372574353249889437513489015845846357846385632478354338120578489537257435324988943751348901584584635784638563247835433")

	var z nat
	n := len(mulx)
	z = z.make(2 * n)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		basicSqr(z, mulx)
	}
}

func BenchmarkFazAddMulVVW(b *testing.B) {
//	var benchSizes = []int{1, 2, 3, 4, 5, 1e1, 1e2, 1e3, 1e4, 1e5}
	var benchSizes = []int{1e3, 1e4, 1e5}

	for _, n := range benchSizes {
		x := rndV(n)
		y := rndW()
		z := make([]Word, n)
		b.Run(fmt.Sprint(n), func(b *testing.B) {
			b.SetBytes(int64(n * _W))
			for i := 0; i < b.N; i++ {
				addMulVVW(z, x, y)
			}
		})
	}
}

func BenchmarkFazMulAddVWW(b *testing.B) {
//	var benchSizes = []int{1, 2, 3, 4, 5, 1e1, 1e2, 1e3, 1e4, 1e5}
	var benchSizes = []int{1e3, 1e4, 1e5}

	for _, n := range benchSizes {
		x := rndV(n)
		y := rndW()
		z := make([]Word, n)
		b.Run(fmt.Sprint(n), func(b *testing.B) {
			b.SetBytes(int64(n * _W))
			for i := 0; i < b.N; i++ {
				mulAddVWW(z, x, y, 0)
			}
		})
	}
}
