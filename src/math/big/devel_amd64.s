// +build !math_big_pure_go

#include "textflag.h"
	
// func addMulVVW_unrolled(z, x []Word, y Word, cin Word) (cout Word)
TEXT 路addMulVVW_unrolled(SB),NOSPLIT,$0
	MOVQ z+0(FP), R10
	MOVQ x+24(FP), R8
	MOVQ y+48(FP), R9
	MOVQ z_len+8(FP), R11
	MOVQ $0, BX		// i = 0
	MOVQ $0, CX		// c = 0

	CMPQ R11, $0		// i is 0?
	JEQ E6

L6:	MOVQ (R8)(BX*8), AX
	MULQ R9
	ADDQ CX, AX
	ADCQ $0, DX
	ADDQ AX, (R10)(BX*8)
	ADCQ $0, DX
	MOVQ DX, CX
	
	ADDQ $1, BX		// i++
	CMPQ BX, R11		// i < n
	JL L6
	
	XORQ CX, CX
	MOVQ cin+56(FP), AX
	ADDQ (R10)(BX*8), DX
	ADCQ $0, CX
	ADDQ AX, DX
	ADCQ $0, CX
	
	MOVQ DX, (R10)(BX*8)
E6:
	MOVQ CX, cout+64(FP)
	RET


// func intmadd1x512(z, x, y []Word) 
TEXT 路intmadd1x512(SB),NOSPLIT,$8
	// Push BP
	MOVQ BP, -8(SP)
	
	MOVQ z+ 0(FP), DI
	MOVQ x+24(FP), SI
	MOVQ y+48(FP), BP

	MOVQ $0, CX
	MOVQ $0, R8
	MOVQ (BP), BX
	
L7:

	MOVQ 0(SI)(CX*8), AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0, DX
	ADDQ 0(DI)(CX*8), AX
	ADCQ $0, DX
	MOVQ AX, 0(DI)(CX*8)
	
	MOVQ 8(SI)(CX*8), AX
	MULQ BX	
	ADDQ R8, AX
	ADCQ $0, DX
	ADDQ 8(DI)(CX*8), AX
	ADCQ $0, DX
	MOVQ  R9,  8(DI)(CX*8)
	
	MOVQ 16(SI)(CX*8), AX
	MULQ BX
	ADDQ AX, R10
		MOVQ 24(SI)(CX*8), AX
	ADCQ DX, R11
	ADDQ 16(DI)(CX*8), R10
	MOVQ R10, 16(DI)(CX*8)
	ADCQ $0, R11
	
	MULQ BX
	ADDQ AX, R11
		MOVQ 32(SI)(CX*8), AX
	ADCQ DX, R12
	ADDQ 24(DI)(CX*8), R11
	MOVQ R11, 24(DI)(CX*8)
	ADCQ $0, R12
	
	MULQ BX
	ADDQ AX, R12
		MOVQ 40(SI)(CX*8), AX
	ADCQ DX, R13
	ADDQ 32(DI)(CX*8), R12
	MOVQ R12, 32(DI)(CX*8)
	ADCQ $0, R13
	
	MULQ BX
	ADDQ AX, R13
		MOVQ 48(SI)(CX*8), AX
	ADCQ DX, R14
	ADDQ 40(DI)(CX*8), R13
	MOVQ R13, 40(DI)(CX*8)
	ADCQ $0, R14
	
	MULQ BX
	ADDQ AX, R14
		MOVQ 56(SI)(CX*8), AX
	ADCQ DX, R15
	ADDQ 48(DI)(CX*8), R14
	MOVQ R14, 48(DI)(CX*8)
	ADCQ $0, R15
	
	MULQ BX
	ADDQ 56(DI)(CX*8), R15
	ADDQ AX, R15
	ADCQ $0, DX
	MOVQ R15, 56(DI)(CX*8)
	ADCQ $0, DX
	
	MOVQ DX, R8
	
	ADDQ $8, CX
	MOVQ x_len+32(FP), AX
	CMPQ CX, AX
	JLT L7
	
	MOVQ  R8,  0(DI)(CX*8)
		
	// Pop BP 
	MOVQ -8(SP), BP
	RET


// func intmaddNxN(z, x, y []Word) 
TEXT 路intmaddNxN(SB),NOSPLIT,$40
	// Push BP
	MOVQ BP, -8(SP)
	
	//Save len(x) in -40SP
 	MOVQ x_len+32(FP), AX
	MOVQ AX, -40(SP)
	
	MOVQ z+ 0(FP), DI
	MOVQ x+24(FP), SI

L_START_X:
	MOVQ -40(SP), AX
	CMPQ AX, $8
	JLT L_SINGLE
	
	//Save len(y) in -24SP
 	MOVQ y_len+56(FP), AX
	MOVQ AX, -24(SP)
	
	MOVQ y+48(FP), BP

	MOVQ  0(DI), R8
	MOVQ  8(DI), R9
	MOVQ 16(DI), R10
	MOVQ 24(DI), R11
	MOVQ 32(DI), R12
	MOVQ 40(DI), R13
	MOVQ 48(DI), R14
	MOVQ 56(DI), R15
	
L_START_Y:
	MOVQ -24(SP), AX	
	MOVQ $8, DX
	CMPQ AX, DX
	CMOVQLT AX, DX
	CMPQ DX, $0
	JE L_END_Y
	
	SUBQ DX, AX
	MOVQ AX, -24(SP)
	MOVQ DX, -16(SP)
	MOVQ $0, CX
L1:
	MOVQ (BP)(CX*8), BX
	MOVQ (SI), AX
	MULQ BX
	ADDQ AX, R8
	MOVQ R8, (DI)(CX*8)
	MOVQ DX, R8
	ADCQ $0, R8

	MOVQ 8(SI), AX
	MULQ BX
	ADDQ AX, R9
	ADCQ $0, DX
	ADDQ R9, R8
	MOVQ DX, R9
	ADCQ $0, R9

	MOVQ 16(SI), AX
	MULQ BX
	ADDQ AX, R10
	ADCQ $0, DX
	ADDQ R10, R9
	MOVQ DX, R10
	ADCQ $0, R10

	MOVQ 24(SI), AX
	MULQ BX
	ADDQ AX, R11
	ADCQ $0, DX
	ADDQ R11, R10
	MOVQ DX, R11
	ADCQ $0, R11

	MOVQ 32(SI), AX
	MULQ BX
	ADDQ AX, R12
	ADCQ $0, DX
	ADDQ R12, R11
	MOVQ DX, R12
	ADCQ $0, R12

	MOVQ 40(SI), AX
	MULQ BX
	ADDQ AX, R13
	ADCQ $0, DX
	ADDQ R13, R12
	MOVQ DX, R13
	ADCQ $0, R13

	MOVQ 48(SI), AX
	MULQ BX
	ADDQ AX, R14
	ADCQ $0, DX
	ADDQ R14, R13
	MOVQ DX, R14
	ADCQ $0, R14

	MOVQ 56(SI), AX
	MULQ BX
	ADDQ AX, R15
	ADCQ $0, DX
	ADDQ R15, R14
	MOVQ DX, R15
	ADCQ $0, R15
	
	MOVQ -16(SP), AX
	ADDQ $1, CX
	CMPQ CX, AX
	JL L1
	
	ADDQ  0(DI)(CX*8),  R8
	ADCQ  8(DI)(CX*8),  R9
	ADCQ 16(DI)(CX*8), R10
	ADCQ 24(DI)(CX*8), R11
	ADCQ 32(DI)(CX*8), R12
	ADCQ 40(DI)(CX*8), R13
	ADCQ 48(DI)(CX*8), R14
	ADCQ 56(DI)(CX*8), R15

	SHLQ $3, CX
	ADDQ CX, BP
	ADDQ CX, DI
	JMP L_START_Y

L_END_Y:
    MOVQ  R8,  0(DI)
	MOVQ  R9,  8(DI)
	MOVQ R10, 16(DI)
	MOVQ R11, 24(DI)
	MOVQ R12, 32(DI)
	MOVQ R13, 40(DI)
	MOVQ R14, 48(DI)
	MOVQ R15, 56(DI)

L_END_X:
	MOVQ -40(SP), AX
	SUBQ $8, AX
	MOVQ AX, -40(SP)
	MOVQ x_len+32(FP), CX
	SUBQ AX, CX
	SHLQ $3, CX
	MOVQ z+0(FP), DI
	ADDQ CX, DI
	ADDQ $64, SI	
	JMP L_START_X
	
L_SINGLE:
	MOVQ y+48(FP), BP
	MOVQ -40(SP), R11
	MOVQ y_len+56(FP), R12
	CMPQ R12, $0
	JEQ L_END
	MOVQ $0, R10	
	
L_SINGLE_Y:	
	CMPQ R11, $0
	JEQ L_END

	MOVQ $0, R8
	MOVQ $0, CX		
	MOVQ (BP)(CX*8), BX	
L_SINGLE_X:	
	MOVQ (SI)(CX*8), AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0, DX
	ADDQ (DI)(CX*8), AX
	ADCQ $0, DX
	MOVQ AX, (DI)(CX*8)
	MOVQ DX, R8
	
	ADDQ $1, CX		// i++
	CMPQ CX, R11		// i < n
	JLT L_SINGLE_X
	MOVQ R8, (DI)(CX*8)

	ADDQ $1, R10
	ADDQ $8, BP		
	ADDQ $8, DI		
	CMPQ R10, R12
	JLT L_SINGLE_Y

L_END:
	// Pop BP 
	MOVQ -8(SP), BP
	RET


// func addmulNxN(z, x, y [] Word)
TEXT 路addmulNxN(SB),NOSPLIT,$8
	// Push BP
	MOVQ BP, -8(SP)
	
	MOVQ z+ 0(FP), DI
	MOVQ x+24(FP), SI
	MOVQ y+48(FP), BP

	MOVQ x_len+32(FP), R11
	MOVQ y_len+56(FP), R12
	CMPQ R12, $0
	JEQ E5
	MOVQ $0, R10	
	
LL5:	
	CMPQ R11, $0
	JEQ E5

	MOVQ $0, R8
	MOVQ $0, CX		
	MOVQ (BP)(CX*8), BX	
L5:	MOVQ (SI)(CX*8), AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0, DX
	ADDQ (DI)(CX*8), AX
	ADCQ $0, DX
	MOVQ AX, (DI)(CX*8)
	MOVQ DX, R8
	
	ADDQ $1, CX		// i++
	CMPQ CX, R11		// i < n
	JLT L5
	MOVQ R8, (DI)(CX*8)

	ADDQ $1, R10
	ADDQ $8, BP		
	ADDQ $8, DI		
	CMPQ R10, R12
	JLT LL5

E5:

	// Pop BP 
	MOVQ -8(SP), BP
	RET


